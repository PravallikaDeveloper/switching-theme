PROJECT: Multi-Theme Switcher App
---------------------------------

This application showcases dynamic theme switching across pages and components using React and TypeScript.

-------------------------------------------------------------
1. THEME MANAGEMENT (src/theme/themecontext.tsx)
-------------------------------------------------------------
- Created ThemeContext to manage theme state using React Context API.
- Three themes stored as string identifiers (e.g., "theme1", "theme2", "theme3").
- Uses `localStorage` to persist selected theme across reloads.
- `useEffect` applies theme class to document body.

-------------------------------------------------------------
2. ROUTING (src/components/home, about, contact)
-------------------------------------------------------------
- React Router handles navigation.
- Pages demonstrate theme continuity and reuse of common layout.
- Header is fixed and includes a dropdown for theme switching.

-------------------------------------------------------------
3. API SERVICE (src/services/api.service.ts)
-------------------------------------------------------------
- Fetches data from: https://fakestoreapi.com/products
- Used in product-list component to display dynamic product cards.

-------------------------------------------------------------
4. COMPONENTS
-------------------------------------------------------------
- **Header**: App name/logo and theme dropdown
- **Sidebar**: Only visible in Theme 2
- **Product List**: Shows products using card layout in Theme 3
- **About / Contact / Home**: Dummy content with basic layout and responsiveness

-------------------------------------------------------------
5. STYLING (src/styles/themes.ts)
-------------------------------------------------------------
- Each theme has its own styling structure using Tailwind CSS utility classes.
- Fonts, background, card layout, sidebar, buttons, and grid systems vary.

-------------------------------------------------------------
6. RESPONSIVENESS
-------------------------------------------------------------
- Tailwind used to make layout mobile-friendly.
- Sidebar collapses or reorders based on screen size.
- Product cards switch between grid/list based on theme.

-------------------------------------------------------------
7. ANIMATIONS
-------------------------------------------------------------
- Subtle transitions applied when theme changes using Tailwind's transition utilities.

-------------------------------------------------------------
8. SECURITY CONSIDERATIONS
-------------------------------------------------------------
- Validated API responses
- Used keys in list rendering
- Avoided inline scripts/styles
- Sensitive logic is not exposed

-------------------------------------------------------------
9. FILES TO NOTE
-------------------------------------------------------------
- `themecontext.tsx`: Main context logic
- `api.service.ts`: API fetch wrapper
- `themes.ts`: All theme-related class maps
- `App.tsx`: Routes and wrapper setup
- `index.tsx`: App entry point

-------------------------------------------------------------
10. FUTURE IMPROVEMENTS
-------------------------------------------------------------
- Add unit tests using Jest + React Testing Library
- Add dark/light theme toggle accessibility options
- Add user login and theme preference sync
